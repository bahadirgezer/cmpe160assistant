package airline;import java.util.ArrayList;import airline.aircraft.Aircraft;import airport.Airport;import passenger.Passenger;public class Airline {    ArrayList<Aircraft> aircrafts;    int maxNumberOfAircrafts;    double operationalCost;    double revenue;    double expense;        public Airline(int maxNumberOfAircrafts) {        aircrafts = new ArrayList<Aircraft>();        this.maxNumberOfAircrafts = maxNumberOfAircrafts;    }    public boolean addAircraft(Aircraft aircraft) {        if (maxNumberOfAircrafts > aircrafts.size()) {            aircrafts.add(aircraft);                        return true;        }        return false;    }    public boolean removeAircraft(Aircraft aircraft) {        if (!aircrafts.contains(aircraft)) {            return false;        }        if (aircraft.isEmpty()) {            aircrafts.remove(aircraft);            return true;        }        return false;    }    public checkAvailability(Airport toAirport, Aircraft aircraft) { // not necessary        if (aircraft.getCurrentAirport() != airport) {            return false;        }        if (!aircrafts.contains(aircraft)) {            return false;        }        if (toAirport.isFull(aircraft)) {            return false;        }        return true;    }    public boolean fly(Airport toAirport, Aircraft aircraft) {        double runningCost = operationalCost * aircrafts.size();        expense += runningCost;        if (!aircrafts.contains(aircraft)) {            return false;        }        if (aircraft.getCurrentAirport().equals(toAirport)) {            return false;        }        if (toAirport.isFull(aircraft)) { //needs to check if there is enough space for the airline.aircraft            return false;        }        //double potentialRevenue = airline.aircraft.getRevenue(Airport airport);        if (aircraft.fly(toAirport)) {            expense += aircraft.getFlightCost();            //revenue += potentialRevenue;            return true;        }        return false;    }    public boolean transferPassenger(PassengerAircraft fromAircraft, PassengerAircraft toAircraft, Passenger passenger) {        if (!aircrafts.contains(fromAircraft) || !aircrafts.contains(toAircraft)) {            return false;        }        if (!fromAircraft.getCurrentAirport().equals(toAircraft.getCurrentAirport())) {            return false;        }        if (!fromAircraft.hasPassenger(passenger)) {            return false;        }        if (toAircraft.isFull()) {            return false;        }        if (toAircraft.loadPassenger(passenger)) {            fromAircraft.removePassenger(passenger);            passenger.transfer(fromAircraft.getCurrentAirport());            return true;        }        return false;    }    public boolean loadPassenger(Airport airport, PassengerAircraft aircraft, Passenger passenger) {        if (aircraft.getCurrentAirport() != airport) {            return false;        }        if (!aircrafts.contains(aircraft)) {            return false;        }        if (aircraft.isFull()) {            return false;        }        if (aircraft.loadPassenger(passenger)) { //need to double-check the method and what it looks at            airport.removePassenger(passenger);            return true;        }        return false;    }    public void disembarkPassengers(PassengerAircraft aircraft) {        double ticketPrice = aircraft.disembarkPassengers(aircraft.getCurrentAirport());        revenue += ticketPrice;    }    // public boolean fly(Aircraft airline.aircraft, Airport toAirport) {    //     if (!aircrafts.contains(airline.aircraft)) {    //         return false;    //     }    //     if (airline.aircraft.getCurrentAirport() == toAirport) {    //         return false;    //     }    //     if (toAirport.isFull(airline.aircraft)) {    //         return false;    //     }    //     if (airline.aircraft.fly(toAirport)) {    //         airline.aircraft.getFlightCost(toAirport);    //         return true;    //     }    // }    public void printAircrafts() {        for (Aircraft aircraft : aircrafts) {            System.out.println(aircraft.toString());        }    }}